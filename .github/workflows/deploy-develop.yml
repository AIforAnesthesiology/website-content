name: Deploy and Publish (Develop)

on:
  push:
    branches: develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - website-dir: website-diag
            site-id: NETLIFY_SITEID_DIAG_BETA

    steps:
      - uses: actions/checkout@v2

      - name: Test Matrix Run
        if: ${{ github.ref }} == refs/heads/develop
        run: echo develop

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev-requirements.txt') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r ./requirements.txt

      - name: Parse Publications
        run: bash ./parse_publications.sh

      - name: Copy Content
        run: bash copy_content.sh
        env:
          WEBSITE: ${{ matrix.website-dir }}

      - name: Deploy Settings
        run: bash deploy.sh
        env:
          WEBSITE: ${{ matrix.website-dir }}
          DEVELOPMENT: 1

      - name: Publish
        uses: netlify/actions/cli@master
        env:
          NETLIFY_SITE_ID: ${{ secrets[matrix.site-id] }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_DEV_AUTH }}
        with:
          args: deploy --dir=${{ matrix.website-dir }}/output --prod
  # images:
  #   if: github.ref == 'refs/heads/master' && "! contains(toJSON(github.event.commits.*.message), '[ci skip]')"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: "10.15"
  #     - uses: actions/cache@v2
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-
  #     - name: Setup npm
  #       run: npm install --prefix imgoptim --no-save
  #     - name: Optimize
  #       run: bash ./optimize_images.sh
